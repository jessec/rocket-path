{"name":"Rocket-Path","tagline":"Small, simple, and helpful tree library written in Java.","body":"Rocket-Path\r\n===========\r\n\r\nA simple tree structure, written in Java, where each node can have a *key*, a *value*, and any number of *child-nodes*.\r\nThe library also provides two additional solutions to simplify construction of such trees. Helper class ``TreePath`` is\r\nprovided for representing paths to tree nodes and for tracking the current position in the path. All in all, the\r\n*Rocket-Path* library is small, light-weight, but helpful for constructing simple trees and navigating through them.\r\n\r\nUsing tree structures for solving complicated tasks in an application has many benefits, including the following:\r\n\r\n* can evolve (scale) over time;\r\n* can be visualized;\r\n* can be tested;\r\n* has normal memory usage.\r\n\r\nOverview\r\n--------\r\n\r\nThe tree nodes of this library are immutable, serializable, and data within is totally accesible through getter methods.\r\nCreated trees cannot be altered after creation. To alter a tree, a new tree must be created where unchanged subtrees\r\nmay be reused from the previous tree.\r\n\r\nThere are three ways to construct a tree:\r\n\r\n1. __Creating instances of ``TreeNode`` class directly__\r\n\r\n\t```java\r\n\t// new TreeNode(Object key, Object value, TreeNode... children);\r\n\tTreeNode alice    = new TreeNode(Integer.valueOf(1), \"Alice\");\r\n\tTreeNode bob      = new TreeNode(Integer.valueOf(2), \"Bob\");\r\n\tTreeNode mary     = new TreeNode(Integer.valueOf(3), \"Mary\");\r\n\tTreeNode managers = new TreeNode(\"managers\", \"Managers\", alice, bob, mary);\r\n\t```\r\n\r\n2. __Using ``TreeNodeBuilder`` as a more convenient way__\r\n\r\n\t```java\r\n\tprivate class ManagersNode implements TreeNodeBuilderAware {\r\n\t\r\n\t  public void initNode(TreeNodeBuilder node) {\r\n\t    node.addChild(Integer.valueOf(1), \"Alice\");\r\n\t    node.addChild(Integer.valueOf(2), \"Bob\");\r\n\t    node.addChild(Integer.valueOf(3), \"Mary\");\r\n\t  }\r\n\t}\r\n\t```\r\n\r\n\t```java\r\n\t// new TreeNodeBuilder([Object key, Object value, ][TreeNodeCallback callback])\r\n\r\n\tTreeNode team = new TreeNodeBuilder(null, \"Development team\")\r\n\t  .addChild(\"managers\", new ManagersNode())\r\n\t  .addChild(\"developers\", new DevelopersNode())\r\n\t  .addChild(\"analysts\", new AnalystsNode())\r\n\t  .addChild(new TreeNode(\"testers\", alice, bob, mary))\r\n\t  .build();\r\n\t```\r\n\r\n3. __``@TreeNode`` annotations on node value classes (with some help from CDI)__\r\n\r\n\t```java\r\n\t@Named(\"teamA\") // CDI named bean, one way for referring to beans other than class.\r\n\t@TreeNode(key = \"DevTeam\",\r\n\t    childTypes = { Managers.class, Developers.class, Analysts.class, Testers.class })\r\n\tpublic class DevelopmentTeam {}\r\n\t```\r\n\r\n\tExamples of how to inject a constructed tree:\r\n\r\n\t```java\r\n\t// By root node value object type:\r\n\t@Inject @RootNode(type = DevelopmentTeam.class)\r\n\tprivate TreeNode team;\r\n\t\r\n\t// By root node value bean name (explicit)\r\n\t@Inject @RootNode(\"teamA\")\r\n\tprivate TreeNode team;\r\n\t\r\n\t// By root node value bean name (implicit)\r\n\t@Inject @RootNode\r\n\tprivate TreeNode teamA;\r\n\t```\r\n\r\nTree Path\r\n---------\r\n\r\nIt is easier to refer to a tree node when referring to it by some kind of path. ``TreePath`` is a class for\r\nparsing, formatting, representing and traversing a tree path of type ``String``. By default, it assumes that path\r\nelements are separated by forward slash. Additionally supports extension parsing when other than the simplest\r\nconstructor is used for creating a path (since detecting whether extension is really an extension and not part of the\r\nlast path segment, it needs more careful handling). Default extension separator is dot. Empty path segments are ignored\r\n(so a preceding or trailing slash won't have any significance). ``TreePath`` also provides handy methods for tracking\r\nthe current position in path and printing out the previous, following, or full path.\r\n\r\nConstruction:\r\n\r\n```java\r\nnew TreePath(String path);\r\nnew TreePath(String path, String pathItemSeparator, String extensionSeparator);\r\nnew TreePath(String path, String[] allowedExtensions, boolean extensionsCaseSensitive);\r\nnew TreePath(String path, String itemSep, String extSep, String[] allowedExts,\r\n    boolean extCaseSensitive);\r\n```\r\n\r\nMore information\r\n----------------\r\n\r\nAlthough this README covers the most use-cases, please refer to the complete\r\n[JavaDoc](http://mrtamm.github.com/rocket-path/javadoc/0.2/) or the\r\n[User Guide](https://github.com/mrtamm/rocket-path/wiki/User-Guide) of the *Rocket-Path* library to get more detailed\r\ninformation.\r\n\r\nThis library used to contain a tree-based HTTP request processing code in version 0.1 which is now removed and\r\nmaintained separately: mrtamm/rocket-embedded.\r\n\r\n### Dependencies ###\r\n\r\n*Rocket-Path* is compatible with Java 6 or newer runtime. If _Contexts And Dependecy Injection_ (CDI) is installed at\r\nthe platform, the annotations-based approch for constructing trees is also enabled.\r\n\r\nThere are no further dependencies.\r\n\r\n### Building ###\r\n\r\nThis project uses [Gradle](http://www.gradle.org/) for\r\n\r\n* downloading dependencies (automatically),\r\n* generating Eclipse IDE project preferences file (``gradle eclipse``),\r\n* executing unit tests (``gradle test``),\r\n* building the project (``gradle jar``).\r\n\r\nThe main command for running all tasks should be just ``gradle``. To view more available tasks, execute the following:\r\n\r\n\tgradle tasks\r\n\r\nGradle uses ``./build/`` directory for storing build process results:\r\n\r\n\t./build/libs/           - composed JAR file directory\r\n\t./build/docs/javadoc/   - generated JavaDoc directory\r\n\t./build/reports/tests/  - generated report for executed tests\r\n\r\nGradle can be configured by editing ``./build.gradle`` file.\r\n\r\n### License ###\r\n\r\nThis library is open-sourced with [Apache 2.0 license](http://www.apache.org/licenses/LICENSE-2.0) and is free to use.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}